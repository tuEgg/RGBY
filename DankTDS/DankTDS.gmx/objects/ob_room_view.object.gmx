<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>init_game();

view_wport[0] = global.gameWidth;
view_hport[0] = global.gameHeight;
view_wview[0] = global.gameWidth;
view_hview[0] = global.gameHeight;
display_set_gui_size(global.gameWidth,global.gameHeight);
room_speed = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.in_menu = false {
    //if window_get_height() != global.gameHeight*global.zoom &amp;&amp; window_get_width() != global.gameWidth*global.zoom &amp;&amp; !window_get_fullscreen() {
    //    window_set_size(global.gameWidth*global.zoom, global.gameHeight*global.zoom);
    //    surface_resize(application_surface, global.gameWidth, global.gameHeight);
    //    display_reset(0, false);
    //
    //}
    
    var _tempx, _tempy ;
    var shake_x, shake_y;
    shake_x = lengthdir_x(random_range(-global.viewshake,global.viewshake),ob_player.direction);
    shake_y = lengthdir_y(random_range(-global.viewshake,global.viewshake),ob_player.direction);
    
    _tempx = ( mouse_x + ob_player.x ) / 2;
    _tempy = ( mouse_y + ob_player.y ) / 2;
    
    x = median( ob_player.x + shake_x , _tempx + shake_x , ( sign( _tempx - ob_player.x ) * view_wview[0]*.2 ) + ob_player.x + shake_x );
    y = median( ob_player.y + shake_y , _tempy + shake_y , ( sign( _tempy - ob_player.y ) * view_hview[0]*.2 ) + ob_player.y + shake_y );
    
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
